{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/eddiekruah/Portfolio/blob/main/covid19_assignment.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zhLg6kEh5lXR"
      },
      "source": [
        "# Tracking the COVID-19 Epidemic\n",
        "## CSE-1010 Data Science Homework\n",
        "\n",
        "### Introduction\n",
        "\n",
        "[Coronavirus disease 2019 (or COVID-19)](https://www.cdc.gov/coronavirus/2019-ncov/downloads/2019-ncov-factsheet.pdf) is a highly contagious respiratory disease caused by a novel coronavirus. It is rapidly spreading across the globe and is being tracked by a variety of sources. In this assignment, your task is to use your programming and data science knowledge to explore COVID-19 data and answer several hypotheses. \n",
        "\n",
        "### Data\n",
        "\n",
        "The data we will be using is the [Novel Corona Virus 2019 Dataset](https://github.com/beoutbreakprepared/nCoV2019/tree/master/latest_data).\n",
        "\n",
        "### Hypotheses\n",
        "\n",
        "* Incidence of COVID-19 differs by sex.\n",
        "\n",
        "* Are mortality rates correlated with age?\n",
        "\n",
        "* Are reported cases of COVID-19 more prevalent in colder climates?\n",
        "\n",
        "\n",
        "First, we install packages into the Google Colaboratory virtual machine."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yi1QFeBdx09Z"
      },
      "source": [
        "# install packages\n",
        "!apt-get install libgeos-dev\n",
        "!pip install pyproj==1.9.6\n",
        "!pip uninstall -y shapely \n",
        "!pip install shapely --no-binary shapely\n",
        "!pip install cartopy\n",
        "%matplotlib inline"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5V5Bw6rZnhG0"
      },
      "source": [
        "Next, we import the libraries that we will need for this analysis."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cxqTR9ql2fTA"
      },
      "source": [
        "# import libraries\n",
        "import cartopy.crs as ccrs\n",
        "import cartopy.feature as cfeature\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import requests\n",
        "from io import StringIO\n",
        "\n",
        "# For improved table display in the notebook\n",
        "from IPython.display import display\n",
        "\n",
        "# set printing options for pandas\n",
        "pd.set_option('max_rows', 2000)"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zMtvUXDNnp2r"
      },
      "source": [
        "The first step in our data science model in the week 9 lectures, is to collect or identify data. I have provided for you a direct link to the COVID-19 data on Google drive. We can access it by treating the file as a StringIO object and passing that into the pandas ```read_csv()``` function."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vRAkMWdSKqp0"
      },
      "source": [
        "data_url = requests.get('https://drive.google.com/uc?export=download&id=1pRnqYs1nuBEbwUJAuQApmyWETSYEVWDy')\n",
        "csv_raw = StringIO(data_url.text)\n",
        "covid19_data = pd.read_csv(csv_raw,low_memory=False)"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wWE7xS7FVCjc"
      },
      "source": [
        "We first describe how to extract elements from a pandas data frame."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YsXNi5EgVJzJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "069813dd-5b34-42cc-aac3-990a7a58ebd0"
      },
      "source": [
        "# You can extract values from a data frame in many different ways. \n",
        "# To retrieve a column we can use   df[colname]\n",
        "print(covid19_data['country'].head(n=3)) # here we use head simply to suppress the large amount of output\n",
        "\n",
        "# We can also use this syntax\n",
        "print(covid19_data.country.head(n=3)) \n",
        "\n",
        "# or pass a list to get multiple columns\n",
        "print(covid19_data[['country','province']].head(n=3)) \n",
        "\n",
        "#.loc() can be used to set a range of rows and/or columns (by name)\n",
        "print(covid19_data.loc[10:15,['country','province']])\n",
        "\n",
        "#.iloc() can be used to set a range of rows and/or columns (by index)\n",
        "print(covid19_data.iloc[10:15,0:4])"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    United States\n",
            "1             Iran\n",
            "2              NaN\n",
            "Name: country, dtype: object\n",
            "0    United States\n",
            "1             Iran\n",
            "2              NaN\n",
            "Name: country, dtype: object\n",
            "         country    province\n",
            "0  United States  Washington\n",
            "1           Iran   Khuzestan\n",
            "2            NaN         NaN\n",
            "          country    province\n",
            "10  United States  Washington\n",
            "11          China       Anhui\n",
            "12  United States  Washington\n",
            "13  United States    Colorado\n",
            "14          China       Anhui\n",
            "15    Switzerland      Zurich\n",
            "          ID    age     sex                     city\n",
            "10    000-1-  60-69  female         Snohomish County\n",
            "11   000-1-1     30    male  Chaohu City, Hefei City\n",
            "12   000-1-1  60-69  female           Whatcom County\n",
            "13  000-1-10  60-69  female            Pitkin County\n",
            "14  000-1-10     30    male               Hefei City\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1QNYPASEcuzp"
      },
      "source": [
        "## Exploratory Data Analysis\n",
        "\n",
        "After we've loaded in the data, the second step in our data science model is to clean and prepare the data. But, in order to do that, we should try to understand it first.\n",
        "\n",
        "**Problem 1)** \n",
        "\n",
        "* Write a function named ```rows_and_columns``` that takes in a pandas data frame and returns the string:\n",
        "\n",
        "  The data has X rows and Y columns.\n",
        "\n",
        "  where X is the number of rows and Y is the number of columns. For example, if the data frame has 100 rows and 10 columns, the function should return the string:\n",
        "\n",
        "  The data has 100 rows and 10 columns.\n",
        "\n",
        "* Write a function named ```get_min_max``` that takes in a pandas data frame and a column name as a string, and returns the minimum and maximum value of that column in a tuple\n",
        "\n",
        "* Write a function named ```odd_get_min_max``` that takes in a pandas data frame and a column name as a string, and returns the minimum and maximum values for the odd rows and that column in a tuple\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JjSgkfzVtPO1"
      },
      "source": [
        "# Problem 1) write your first function here\n",
        "def rows_and_columns(df):\n",
        "  st = \"The data has {} rows and {} columns\".format(df.shape[0],df.shape[1])\n",
        "  return st\n",
        "\n",
        "# Problem 1) write your second function here\n",
        "def get_min_max(df, col):\n",
        "  return (df[col].min(), df[col].max())\n",
        "\n",
        "# Problem 1) write your third function here\n",
        "def odd_get_min_max(df, col):\n",
        "  return (df[col][1::2].min(), df[col][1::2].max())\n"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E3UI-GRyVL-s"
      },
      "source": [
        "And we can test our functions!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xIwijzl-VNcq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ba14b749-453f-4a4f-cf5e-184b045b8e63"
      },
      "source": [
        "# here we call your functions\n",
        "print(rows_and_columns(covid19_data))\n",
        "\n",
        "print(get_min_max(covid19_data,'latitude'))\n",
        "\n",
        "print(odd_get_min_max(covid19_data,'latitude'))"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The data has 261558 rows and 34 columns\n",
            "(-54.0, 70.0718)\n",
            "(-54.0, 70.0718)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1EvFI0Eg_JJk"
      },
      "source": [
        "To get a sense of the data, let's view the column names and a sample of the data."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HejZzBTDV8Fz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "71d1c1ff-7a2a-4dc6-fb65-e2c108381c47"
      },
      "source": [
        "print(covid19_data.columns)\n",
        "print(covid19_data.head())"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['ID', 'age', 'sex', 'city', 'province', 'country',\n",
            "       'wuhan(0)_not_wuhan(1)', 'latitude', 'longitude', 'geo_resolution',\n",
            "       'date_onset_symptoms', 'date_admission_hospital', 'date_confirmation',\n",
            "       'symptoms', 'lives_in_Wuhan', 'travel_history_dates',\n",
            "       'travel_history_location', 'reported_market_exposure',\n",
            "       'additional_information', 'chronic_disease_binary', 'chronic_disease',\n",
            "       'source', 'sequence_available', 'outcome', 'date_death_or_discharge',\n",
            "       'notes_for_discussion', 'location', 'admin3', 'admin2', 'admin1',\n",
            "       'country_new', 'admin_id', 'data_moderator_initials',\n",
            "       'travel_history_binary'],\n",
            "      dtype='object')\n",
            "       ID    age     sex              city          province        country  \\\n",
            "0  000-1-  30-39  female  Snohomish County        Washington  United States   \n",
            "1  000-1-    NaN     NaN               NaN         Khuzestan           Iran   \n",
            "2  000-1-    NaN     NaN               NaN               NaN            NaN   \n",
            "3  000-1-  50-59    male  Snohomish County        Washington  United States   \n",
            "4  000-1-    NaN     NaN               NaN  Pays de la Loire         France   \n",
            "\n",
            "   wuhan(0)_not_wuhan(1)   latitude   longitude geo_resolution  ...  \\\n",
            "0                    1.0  48.048180 -121.696000         admin2  ...   \n",
            "1                    1.0  31.496225   48.967279         admin1  ...   \n",
            "2                    NaN        NaN         NaN            NaN  ...   \n",
            "3                    1.0  48.048180 -121.696000         admin2  ...   \n",
            "4                    1.0  47.486460   -0.811280         admin1  ...   \n",
            "\n",
            "  date_death_or_discharge notes_for_discussion location admin3  \\\n",
            "0                     NaN                  NaN      NaN    NaN   \n",
            "1                     NaN                  NaN      NaN    NaN   \n",
            "2                     NaN                  NaN      NaN    NaN   \n",
            "3                     NaN                  NaN      NaN    NaN   \n",
            "4                     NaN                  NaN      NaN    NaN   \n",
            "\n",
            "             admin2            admin1    country_new admin_id  \\\n",
            "0  Snohomish County        Washington  United States     2988   \n",
            "1               NaN         Khuzestan           Iran       15   \n",
            "2               NaN               NaN            NaN      NaN   \n",
            "3  Snohomish County        Washington  United States     2988   \n",
            "4               NaN  Pays de la Loire         France       12   \n",
            "\n",
            "  data_moderator_initials travel_history_binary  \n",
            "0                     NaN                   NaN  \n",
            "1                     NaN                   NaN  \n",
            "2                     NaN                   NaN  \n",
            "3                     NaN                   NaN  \n",
            "4                     NaN                   NaN  \n",
            "\n",
            "[5 rows x 34 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k0pMlNdA_b33"
      },
      "source": [
        "The data contain information on where the individual was diagnosed, how old they are, when they were diagnosed, and various other information. But simply looking at the column names and first few rows does not give us too much information. The dataframe ```info()``` function is a great way to get a summary of the input data."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m4GlGTqFa3kH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0410d1c5-9e1c-4e33-e1a7-ec238f22b028"
      },
      "source": [
        "covid19_data.info()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 261558 entries, 0 to 261557\n",
            "Data columns (total 34 columns):\n",
            " #   Column                    Non-Null Count   Dtype  \n",
            "---  ------                    --------------   -----  \n",
            " 0   ID                        261558 non-null  object \n",
            " 1   age                       13358 non-null   object \n",
            " 2   sex                       13399 non-null   object \n",
            " 3   city                      127179 non-null  object \n",
            " 4   province                  245423 non-null  object \n",
            " 5   country                   261483 non-null  object \n",
            " 6   wuhan(0)_not_wuhan(1)     64744 non-null   float64\n",
            " 7   latitude                  260425 non-null  float64\n",
            " 8   longitude                 260425 non-null  float64\n",
            " 9   geo_resolution            260425 non-null  object \n",
            " 10  date_onset_symptoms       3423 non-null    object \n",
            " 11  date_admission_hospital   1849 non-null    object \n",
            " 12  date_confirmation         259888 non-null  object \n",
            " 13  symptoms                  1521 non-null    object \n",
            " 14  lives_in_Wuhan            4228 non-null    object \n",
            " 15  travel_history_dates      2034 non-null    object \n",
            " 16  travel_history_location   5297 non-null    object \n",
            " 17  reported_market_exposure  1313 non-null    object \n",
            " 18  additional_information    7349 non-null    object \n",
            " 19  chronic_disease_binary    850 non-null     object \n",
            " 20  chronic_disease           182 non-null     object \n",
            " 21  source                    243108 non-null  object \n",
            " 22  sequence_available        1311 non-null    object \n",
            " 23  outcome                   857 non-null     object \n",
            " 24  date_death_or_discharge   462 non-null     object \n",
            " 25  notes_for_discussion      421 non-null     object \n",
            " 26  location                  7600 non-null    object \n",
            " 27  admin3                    6387 non-null    object \n",
            " 28  admin2                    94659 non-null   object \n",
            " 29  admin1                    227577 non-null  object \n",
            " 30  country_new               245082 non-null  object \n",
            " 31  admin_id                  222352 non-null  object \n",
            " 32  data_moderator_initials   37639 non-null   object \n",
            " 33  travel_history_binary     21692 non-null   float64\n",
            "dtypes: float64(4), object(30)\n",
            "memory usage: 67.8+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hMlBSSjFARJw"
      },
      "source": [
        "```info()``` shows us that most columns have significantly high levels of missing data. Typically, columns with high levels of missing data are removed or imputed. Here, we will ignore the missing data. The ```describe()``` function is more useful when you have numerical data, but it still provides useful information on how our data are distributed."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "URbdXFxDvbvg",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 522
        },
        "outputId": "7030664f-7bd3-48f5-84b2-d06cc6afc0ce"
      },
      "source": [
        "covid19_data.describe(include=\"all\")"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            ID    age    sex           city  province        country  \\\n",
              "count   261558  13358  13399         127179    245423         261483   \n",
              "unique  259159    203      2           3169       667            115   \n",
              "top     000-1-  50-59   male  New York City  New York  United States   \n",
              "freq        11    533   7444          17373     53518         117979   \n",
              "mean       NaN    NaN    NaN            NaN       NaN            NaN   \n",
              "std        NaN    NaN    NaN            NaN       NaN            NaN   \n",
              "min        NaN    NaN    NaN            NaN       NaN            NaN   \n",
              "25%        NaN    NaN    NaN            NaN       NaN            NaN   \n",
              "50%        NaN    NaN    NaN            NaN       NaN            NaN   \n",
              "75%        NaN    NaN    NaN            NaN       NaN            NaN   \n",
              "max        NaN    NaN    NaN            NaN       NaN            NaN   \n",
              "\n",
              "        wuhan(0)_not_wuhan(1)       latitude      longitude geo_resolution  \\\n",
              "count            64744.000000  260425.000000  260425.000000         260425   \n",
              "unique                    NaN            NaN            NaN              6   \n",
              "top                       NaN            NaN            NaN         admin1   \n",
              "freq                      NaN            NaN            NaN         119834   \n",
              "mean                 0.788969      37.602863     -15.005627            NaN   \n",
              "std                  0.408044      14.707939      78.820706            NaN   \n",
              "min                  0.000000     -54.000000    -159.602502            NaN   \n",
              "25%                  1.000000      33.352046     -75.646457            NaN   \n",
              "50%                  1.000000      40.661000      -9.139300            NaN   \n",
              "75%                  1.000000      43.014087      14.470000            NaN   \n",
              "max                  1.000000      70.071800     174.740000            NaN   \n",
              "\n",
              "        ... date_death_or_discharge           notes_for_discussion location  \\\n",
              "count   ...                     462                            421     7600   \n",
              "unique  ...                      74                            117      373   \n",
              "top     ...              18.02.2020  Could be some cases from 23rd  Chicago   \n",
              "freq    ...                      20                             91      985   \n",
              "mean    ...                     NaN                            NaN      NaN   \n",
              "std     ...                     NaN                            NaN      NaN   \n",
              "min     ...                     NaN                            NaN      NaN   \n",
              "25%     ...                     NaN                            NaN      NaN   \n",
              "50%     ...                     NaN                            NaN      NaN   \n",
              "75%     ...                     NaN                            NaN      NaN   \n",
              "max     ...                     NaN                            NaN      NaN   \n",
              "\n",
              "              admin3      admin2    admin1    country_new admin_id  \\\n",
              "count           6387       94659    227577         245082   222352   \n",
              "unique           411        1772       459            104     1976   \n",
              "top     Xiantao City  Wuhan City  New York  United States       33   \n",
              "freq             235       13663     53516         117928    41145   \n",
              "mean             NaN         NaN       NaN            NaN      NaN   \n",
              "std              NaN         NaN       NaN            NaN      NaN   \n",
              "min              NaN         NaN       NaN            NaN      NaN   \n",
              "25%              NaN         NaN       NaN            NaN      NaN   \n",
              "50%              NaN         NaN       NaN            NaN      NaN   \n",
              "75%              NaN         NaN       NaN            NaN      NaN   \n",
              "max              NaN         NaN       NaN            NaN      NaN   \n",
              "\n",
              "       data_moderator_initials travel_history_binary  \n",
              "count                    37639          21692.000000  \n",
              "unique                      10                   NaN  \n",
              "top                         TR                   NaN  \n",
              "freq                     35494                   NaN  \n",
              "mean                       NaN              0.085331  \n",
              "std                        NaN              0.279380  \n",
              "min                        NaN              0.000000  \n",
              "25%                        NaN              0.000000  \n",
              "50%                        NaN              0.000000  \n",
              "75%                        NaN              0.000000  \n",
              "max                        NaN              1.000000  \n",
              "\n",
              "[11 rows x 34 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0cf85cc6-7a22-4f91-bff0-8a6d4e10a6a5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>city</th>\n",
              "      <th>province</th>\n",
              "      <th>country</th>\n",
              "      <th>wuhan(0)_not_wuhan(1)</th>\n",
              "      <th>latitude</th>\n",
              "      <th>longitude</th>\n",
              "      <th>geo_resolution</th>\n",
              "      <th>...</th>\n",
              "      <th>date_death_or_discharge</th>\n",
              "      <th>notes_for_discussion</th>\n",
              "      <th>location</th>\n",
              "      <th>admin3</th>\n",
              "      <th>admin2</th>\n",
              "      <th>admin1</th>\n",
              "      <th>country_new</th>\n",
              "      <th>admin_id</th>\n",
              "      <th>data_moderator_initials</th>\n",
              "      <th>travel_history_binary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>261558</td>\n",
              "      <td>13358</td>\n",
              "      <td>13399</td>\n",
              "      <td>127179</td>\n",
              "      <td>245423</td>\n",
              "      <td>261483</td>\n",
              "      <td>64744.000000</td>\n",
              "      <td>260425.000000</td>\n",
              "      <td>260425.000000</td>\n",
              "      <td>260425</td>\n",
              "      <td>...</td>\n",
              "      <td>462</td>\n",
              "      <td>421</td>\n",
              "      <td>7600</td>\n",
              "      <td>6387</td>\n",
              "      <td>94659</td>\n",
              "      <td>227577</td>\n",
              "      <td>245082</td>\n",
              "      <td>222352</td>\n",
              "      <td>37639</td>\n",
              "      <td>21692.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>259159</td>\n",
              "      <td>203</td>\n",
              "      <td>2</td>\n",
              "      <td>3169</td>\n",
              "      <td>667</td>\n",
              "      <td>115</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>74</td>\n",
              "      <td>117</td>\n",
              "      <td>373</td>\n",
              "      <td>411</td>\n",
              "      <td>1772</td>\n",
              "      <td>459</td>\n",
              "      <td>104</td>\n",
              "      <td>1976</td>\n",
              "      <td>10</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>000-1-</td>\n",
              "      <td>50-59</td>\n",
              "      <td>male</td>\n",
              "      <td>New York City</td>\n",
              "      <td>New York</td>\n",
              "      <td>United States</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>admin1</td>\n",
              "      <td>...</td>\n",
              "      <td>18.02.2020</td>\n",
              "      <td>Could be some cases from 23rd</td>\n",
              "      <td>Chicago</td>\n",
              "      <td>Xiantao City</td>\n",
              "      <td>Wuhan City</td>\n",
              "      <td>New York</td>\n",
              "      <td>United States</td>\n",
              "      <td>33</td>\n",
              "      <td>TR</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>11</td>\n",
              "      <td>533</td>\n",
              "      <td>7444</td>\n",
              "      <td>17373</td>\n",
              "      <td>53518</td>\n",
              "      <td>117979</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>119834</td>\n",
              "      <td>...</td>\n",
              "      <td>20</td>\n",
              "      <td>91</td>\n",
              "      <td>985</td>\n",
              "      <td>235</td>\n",
              "      <td>13663</td>\n",
              "      <td>53516</td>\n",
              "      <td>117928</td>\n",
              "      <td>41145</td>\n",
              "      <td>35494</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.788969</td>\n",
              "      <td>37.602863</td>\n",
              "      <td>-15.005627</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.085331</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.408044</td>\n",
              "      <td>14.707939</td>\n",
              "      <td>78.820706</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.279380</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-54.000000</td>\n",
              "      <td>-159.602502</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>33.352046</td>\n",
              "      <td>-75.646457</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>40.661000</td>\n",
              "      <td>-9.139300</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>43.014087</td>\n",
              "      <td>14.470000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>70.071800</td>\n",
              "      <td>174.740000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>11 rows × 34 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0cf85cc6-7a22-4f91-bff0-8a6d4e10a6a5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0cf85cc6-7a22-4f91-bff0-8a6d4e10a6a5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0cf85cc6-7a22-4f91-bff0-8a6d4e10a6a5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lD-VEjk2taxP"
      },
      "source": [
        "In the absence of documentation, the values in the data allow us to interpret the data columns. \n",
        "\n",
        "#### Data Cleaning and Wrangling\n",
        "\n",
        "The data are messy. Various parties have contibuted to the dataset without following a consistent formatting for the columns. If we are interested in questions about age, for example, we need to clean the age column. First, let's visualize the age column data by counting the unique fields.\n",
        "\n",
        "**Problem 2)** Write a function named \"get_uniq\" that takes in a pandas data frame and a column name, and returns a numpy ndarray containing the unique values in that column."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YPBKtKEWqZnM"
      },
      "source": [
        "# Problem 2) write your function here\n",
        "def get_uniq(df, col):\n",
        "  return df[col].unique()"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PSJ-ksuksTvK"
      },
      "source": [
        "Let's use your function to print out the unique elements in the age column."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W0mPduaYBIxK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d6f01dc2-c912-4eea-ed46-d9e7ff6a1a70"
      },
      "source": [
        "print(get_uniq(covid19_data,'age'))"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['30-39' nan '50-59' '60-69' '30' '44' '65' '8-68' '21-72' '26' '36' '45'\n",
            " '43' '70' '52' '66' '27' '17' '51' '68' '53' '35' '28' '58' '33' '31'\n",
            " '50' '24' '88' '29' '21' '78' '60' '63' '32' '37' '49' '71' '20-29'\n",
            " '18-99' '47' '41' '39' '42' '38' '7' '40-49' '82' '61' '64' '34-66' '62'\n",
            " '40-89' '80-89' '55' '0.25' '13-19' '69' '16' '8' '10' '25' '34' '55-74'\n",
            " '75-' '70-79' '79' '35-54' '55-' '95' '40' '54' '40-50' '46' '48' '57'\n",
            " '56' '60-60' '80-80' '73' '0-18' '77' '67' '18-' '0-6' '0-10' '22' '74'\n",
            " '10-19' '83' '96' '76' '20' '19' '1.75' '75' '9' '18-65' '1' '54-56'\n",
            " '0.6666666667' '74-76' '27-29' '80' '18' '72' '4' '59' '15' '61-80' '23'\n",
            " '65-99' '81' '90-99' '50-69' '50-60' '92' '85' '91' '87' '14' '12'\n",
            " '19-65' '70-70' '60-70' '2' '30-70' '20-70' '20-69' '16-17' '94' '5-59'\n",
            " '13' '60-' '27-40' '1-19' '18-50' '18-49' '41-60' '18-60' '60-99' '40-69'\n",
            " '30-69' '40-45' '5' '0-9' '3' '13-69' '30-40' '70-100' '0-60' '18 - 100'\n",
            " '0-20' '89' '30-35' '50-100' '60-100' '65-' '50-' '93' '84' '6' '20-30'\n",
            " '50-99' '18-20' '17-66' '97' '11' '14-18' '30-60' '33-78' '16-80' '36-45'\n",
            " '23-72' '0.58333' '0.08333' '20-39' '22-80' '19-77' '70-82' '25-89'\n",
            " '15-88' '86' '21-39' '20-57' '6 weeks' '30-61' '0' '90' '11-12' '40-41'\n",
            " '37-38' '22-23' '47-48' '48-49' '23-24' '87-88' '26-27' '0-1' '0-19'\n",
            " '121' '99' '80-' '21-']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xj1inDfTsbTI"
      },
      "source": [
        "We can also compute the counts for each of the unique elements. Pandas gives us a handy function to do this: ```value_counts()```. By default, ```value_counts()``` ignores NaN values."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WYPEi7_Ksccl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "64194917-f867-4950-cfbe-ac0d91ac1639"
      },
      "source": [
        "print(covid19_data['age'].value_counts())"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "50-59           533\n",
            "60-69           442\n",
            "40-49           420\n",
            "30-39           335\n",
            "70-79           256\n",
            "30              228\n",
            "56              215\n",
            "33              214\n",
            "20-29           211\n",
            "50              211\n",
            "49              209\n",
            "42              207\n",
            "32              199\n",
            "47              196\n",
            "37              195\n",
            "54              195\n",
            "35              194\n",
            "43              192\n",
            "52              190\n",
            "55              189\n",
            "28              184\n",
            "44              183\n",
            "57              176\n",
            "38              176\n",
            "53              175\n",
            "29              174\n",
            "39              174\n",
            "31              172\n",
            "40              171\n",
            "41              170\n",
            "51              169\n",
            "45              167\n",
            "60              166\n",
            "48              165\n",
            "34              162\n",
            "27              162\n",
            "64              161\n",
            "46              158\n",
            "36              158\n",
            "26              157\n",
            "68              155\n",
            "67              153\n",
            "58              151\n",
            "65              149\n",
            "25              145\n",
            "24              142\n",
            "63              139\n",
            "62              139\n",
            "21              138\n",
            "69              138\n",
            "61              138\n",
            "59              137\n",
            "20              136\n",
            "22              133\n",
            "66              127\n",
            "70              126\n",
            "80-89           121\n",
            "72              118\n",
            "23              112\n",
            "71              111\n",
            "73              107\n",
            "18-99            96\n",
            "19               89\n",
            "75               86\n",
            "77               77\n",
            "74               73\n",
            "23-72            70\n",
            "76               70\n",
            "16-80            68\n",
            "80               63\n",
            "78               61\n",
            "79               51\n",
            "22-80            46\n",
            "82               44\n",
            "83               42\n",
            "18               39\n",
            "81               39\n",
            "25-89            37\n",
            "84               34\n",
            "17               31\n",
            "20-69            30\n",
            "16               28\n",
            "90-99            26\n",
            "88               26\n",
            "8-68             26\n",
            "30-70            24\n",
            "0-10             24\n",
            "19-77            22\n",
            "10-19            22\n",
            "87               21\n",
            "85               21\n",
            "18-              20\n",
            "21-72            18\n",
            "61-80            18\n",
            "40-69            18\n",
            "34-66            18\n",
            "94               17\n",
            "15               17\n",
            "86               17\n",
            "13-19            17\n",
            "10               17\n",
            "8                16\n",
            "0-18             16\n",
            "17-66            16\n",
            "13               15\n",
            "70-82            15\n",
            "2                15\n",
            "11               15\n",
            "18-65            15\n",
            "20-70            14\n",
            "40-89            14\n",
            "89               14\n",
            "13-69            14\n",
            "65-              12\n",
            "91               12\n",
            "14               12\n",
            "12               11\n",
            "18-60            10\n",
            "41-60            10\n",
            "36-45            10\n",
            "21-39            10\n",
            "75-              10\n",
            "30-69            10\n",
            "3                 9\n",
            "90                9\n",
            "21-               9\n",
            "4                 9\n",
            "60-70             8\n",
            "60-99             8\n",
            "40-50             8\n",
            "19-65             8\n",
            "54-56             8\n",
            "5                 8\n",
            "7                 8\n",
            "9                 8\n",
            "20-57             7\n",
            "93                7\n",
            "20-39             6\n",
            "95                6\n",
            "1                 6\n",
            "6                 6\n",
            "18-20             6\n",
            "97                6\n",
            "33-78             5\n",
            "0-1               5\n",
            "55-               4\n",
            "0-20              4\n",
            "60-60             4\n",
            "96                4\n",
            "18-49             4\n",
            "50-60             4\n",
            "0.25              4\n",
            "92                4\n",
            "80-               3\n",
            "60-               3\n",
            "80-80             3\n",
            "0                 3\n",
            "30-40             3\n",
            "50-69             3\n",
            "30-61             3\n",
            "14-18             2\n",
            "40-41             2\n",
            "0.58333           2\n",
            "0-6               2\n",
            "0.08333           2\n",
            "55-74             2\n",
            "35-54             2\n",
            "1.75              2\n",
            "27-29             2\n",
            "27-40             2\n",
            "18-50             2\n",
            "70-70             2\n",
            "5-59              2\n",
            "40-45             2\n",
            "0-9               2\n",
            "74-76             2\n",
            "0.6666666667      2\n",
            "70-100            2\n",
            "0-60              2\n",
            "18 - 100          2\n",
            "16-17             2\n",
            "50-100            2\n",
            "60-100            2\n",
            "50-               2\n",
            "20-30             2\n",
            "50-99             2\n",
            "1-19              2\n",
            "26-27             1\n",
            "99                1\n",
            "0-19              1\n",
            "121               1\n",
            "23-24             1\n",
            "87-88             1\n",
            "30-60             1\n",
            "48-49             1\n",
            "47-48             1\n",
            "22-23             1\n",
            "37-38             1\n",
            "11-12             1\n",
            "6 weeks           1\n",
            "15-88             1\n",
            "30-35             1\n",
            "65-99             1\n",
            "Name: age, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0GG9VPins9oP"
      },
      "source": [
        "**Problem 3)** Define a function named \"unique_nonNaN_cnt\" that takes a pandas data frame, a column name as a string, and returns the number of unique non-NaN values. You can think about this as either counting the non-NaN values *or* summing up the unique non-NaN values from the ```value_counts()``` method."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mco_ctc3s_wF"
      },
      "source": [
        "# Problem 3) write your function here\n",
        "def unique_nonNaN_cnt(df, col):\n",
        "  return df[col].value_counts().sum()"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fR6k6gYoU0o7"
      },
      "source": [
        "and test our function..."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JjEqLVmMU20l",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "479e8690-59d8-4b2e-9c6b-379e3032bc7a"
      },
      "source": [
        "print(\"Total of \" + str(unique_nonNaN_cnt(covid19_data,'age')) + \" non-NaN age entries.\")"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total of 13358 non-NaN age entries.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Lvobvji1FNuN"
      },
      "source": [
        "It's clear that the individuals entering the data were not following the same standard or format! We will need to clean this data before we can use it.\n",
        "\n",
        "There is a large amount of missing data, and a large variety of entries. We should clean the age columns. Let's convert the ages to age ranges for plotting. For the existing ranges in the data, let's consider the mean age."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XLtcNzBduXQV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a9dc0396-0640-4a05-c47d-f9ef2d3ab384"
      },
      "source": [
        "# cleaning the age column\n",
        "# We observe that the age column does not follow a nice format\n",
        "\n",
        "# defining the age ranges\n",
        "age_ranges = []\n",
        "for age in range(0,100,10):\n",
        "  age_ranges.append((age,age+10))\n",
        "print(\"Considering age ranges\",age_ranges)\n",
        "\n",
        "# helper function that takes in an numerical age, and a list of ranges and \n",
        "# returns the particular range that the age falls into\n",
        "def findRange(age,arange):\n",
        "  for ager in arange:\n",
        "    if age >= ager[0] and age < ager[1]:\n",
        "      return str(ager[0])+\"-\"+str(ager[1])\n",
        "\n",
        "# a function that will fix our age entries\n",
        "def fixAge(age):\n",
        "  if isinstance(age, str): # check if the age is a string\n",
        "    if 'weeks' in age:\n",
        "      age = age.replace('weeks','')\n",
        "      age = str(float(age)/52.0)\n",
        "    if '-' in age: # if the string has a hyphen (is a range)\n",
        "      parts = age.split(\"-\")\n",
        "      if len(parts)==1: # if the range was poorly formatted...\n",
        "        return findRange(float(parts[0]),age_ranges)\n",
        "      elif len(parts)==2: # if the range was properly formatted, findRange of the mean\n",
        "        if parts[1]=='':\n",
        "          return findRange(float(parts[0]),age_ranges)  \n",
        "        else:\n",
        "          return findRange(np.mean([float(parts[0]),float(parts[1])]),age_ranges)\n",
        "      else:\n",
        "        print(age)\n",
        "        raise InputError(\"Age \" + str(age) + \" not correctly handled.\")\n",
        "    else: \n",
        "        return findRange(float(age),age_ranges)\n",
        "  elif np.isnan(age):\n",
        "    return np.nan\n",
        "  else:\n",
        "    raise InputError(\"Age \" + str(age) + \" not correctly handled.\")\n",
        "\n",
        "# create a new column that holds the new age ranges\n",
        "# this code will run the fixAge function for each row of the covid data frame and\n",
        "# store the result in the newly created 'age_range' column\n",
        "covid19_data['age_range'] = covid19_data.apply(lambda row : fixAge(row['age']), axis = 1) "
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Considering age ranges [(0, 10), (10, 20), (20, 30), (30, 40), (40, 50), (50, 60), (60, 70), (70, 80), (80, 90), (90, 100)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kBKx404oOtEj"
      },
      "source": [
        "The ```apply()``` function is very important: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html.  It allows us to apply a function across some data frame axis (e.g. for each row, or each column). It's combined with the ```lambda``` keyword here. ```lambda``` defines an anonymous function (a function without a name). You can use these wherever functions are required, but allow you to define the functionality in a single expression. Let's do some quality control to verify we didn't make any mistakes.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z5siWDL2bUIK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c6a57a14-06cf-46b6-9511-d7e3875a97dd"
      },
      "source": [
        "print(\"the total number of rows with non-NaN ages is \" + str(sum(covid19_data['age'].value_counts())))\n",
        "print(\"the total number of rows with non-NaN age_ranges is \" + str(sum(covid19_data['age_range'].value_counts())))"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the total number of rows with non-NaN ages is 13358\n",
            "the total number of rows with non-NaN age_ranges is 13357\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aQqt46HsSXIT"
      },
      "source": [
        "The number of non-NaN age_ranges is 1 less, and if we inspect the original data, we can find that one age did not fall in our age ranges of 0-100. This age was 121 and is likely a mistake in entry since the oldest person currently alive is 117 years old, so we can safely discard this outlier.\n",
        "\n",
        "The next step in our data science model is exploratory data analysis. Let's visualize the COVID-19 cases by age group. There are a number of plots we can use here; a bar plot is a good choice. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xUqtdfMcYsoo",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 690
        },
        "outputId": "8aedcff4-728d-4acf-84f5-b79e5509c254"
      },
      "source": [
        "# distribution of cases by age\n",
        "age_range_labels = [str(x[0])+\"-\"+str(x[1]) for x in age_ranges]\n",
        "counts = covid19_data.age_range.value_counts()[age_range_labels]\n",
        "\n",
        "# create plot\n",
        "fig, ax = plt.subplots(figsize=(20, 10))\n",
        "index = np.arange(len(age_ranges))\n",
        "bar_width = 0.35\n",
        "opacity = 0.8\n",
        "\n",
        "# docs are here: https://matplotlib.org/3.2.1/api/_as_gen/matplotlib.pyplot.bar.html\n",
        "rects1 = plt.bar(index, counts, bar_width,alpha=opacity,color='b')\n",
        "\n",
        "plt.xlabel('Age Range')\n",
        "plt.ylabel('Count')\n",
        "plt.title('Corona Cases per Age Group')\n",
        "plt.xticks(index, [\"[\"+str(x[0])+\",\"+str(x[1])+\")\" for x in age_ranges])\n",
        "plt.legend()\n",
        "\n",
        "plt.tight_layout()"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.legend:No handles with labels found to put in legend.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jqMdyuVHySON"
      },
      "source": [
        "Let's address the **incidence of COVID-19 differs by sex** hypothesis we made above. We can make a bar plot stratified by sex.\n",
        "\n",
        "**Problem 4)** Fill in the relevant prompts below to create the bar plot of COVID-19 cases by sex.\n",
        "\n",
        "As a hint, we can select a subset of rows based on the value in a column with the syntax:\n",
        "\n",
        "```dataframe[dataframe[colname]==value]```\n",
        "\n",
        "where dataframe is a pandas data frame, colname is the column name, and value is some value for the colname. You can use other logical comparisons as well, e.g., to get all rows with latitude > 0, we can use the syntax:\n",
        "\n",
        "```covid19_data[covid19_data.latitude>0]```\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tt224ZfEgDwH"
      },
      "source": [
        "# distribution of cases by age and sex\n",
        "# Problem 4) Complete where we have indicated below\n",
        "def create_bar_plot_by_sex(covid19_data, age_ranges):\n",
        "  age_range_labels = [str(x[0])+\"-\"+str(x[1]) for x in age_ranges]\n",
        "  # from the covid19_data, select the age_range for female rows \n",
        "  female_age_ranges = covid19_data.loc[covid19_data['sex']=='female','age_range']\n",
        "  counts_female = female_age_ranges.value_counts()[age_range_labels]\n",
        "  \n",
        "  # from the covid19_data, select the age_range for male rows \n",
        "  male_age_ranges =  covid19_data.loc[covid19_data['sex']=='male','age_range']\n",
        "  counts_male = male_age_ranges.value_counts()[age_range_labels]\n",
        "\n",
        "  # create plot\n",
        "  fig, ax = plt.subplots(figsize=(20, 10))\n",
        "  index = np.arange(len(age_ranges))\n",
        "  bar_width = 0.35\n",
        "  opacity = 0.8\n",
        "\n",
        "  # the bar function draws a bar plot, the first two arugments are the x position of the bar, and its height\n",
        "  rects1 = plt.bar(index, counts_male, bar_width, alpha=opacity,color='b',label='Male')\n",
        "\n",
        "  rects2 = plt.bar(bar_width + index, counts_female, bar_width, alpha=opacity,color='pink',label='Female')\n",
        "\n",
        "  plt.xlabel('Age Range')\n",
        "  plt.ylabel('Count')\n",
        "  plt.title('Corona Cases per Age Group')\n",
        "  #plt.xticks(index + bar_width, age_ranges)\n",
        "  plt.xticks(index, [\"[\"+str(x[0])+\",\"+str(x[1])+\")\" for x in age_ranges])\n",
        "  plt.legend()\n",
        "\n",
        "  plt.tight_layout()\n",
        "  return counts_female, counts_male\n"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T7K9P6pEUuYg"
      },
      "source": [
        "Now let's run our visualization."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Yrb-RNu7Uv4N",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 672
        },
        "outputId": "3b55d5a0-3680-4aa9-a51c-ac9846d3cccb"
      },
      "source": [
        "cnts_f, cnts_m = create_bar_plot_by_sex(covid19_data, age_ranges)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OjZZMKn0zf2U"
      },
      "source": [
        "Let's view the COVID-19 cases by country. The relevant column name is \"country\"."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jsGY1GsGZuVa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 690
        },
        "outputId": "612d82e4-3566-47d9-c91e-ecbe1a332d1c"
      },
      "source": [
        "# distribution of cases by country\n",
        "def create_bar_plot_by_country(covid19_data):\n",
        "  country_cnts = covid19_data.country.value_counts()\n",
        "\n",
        "  n_groups = len(country_cnts)\n",
        "  counts = country_cnts\n",
        "\n",
        "  # create plot\n",
        "  fig, ax = plt.subplots(figsize=(20, 10))\n",
        "  index = np.arange(n_groups)\n",
        "  bar_width = 0.35\n",
        "  opacity = 0.8\n",
        "\n",
        "  rects1 = plt.bar(index, counts, bar_width,\n",
        "                  alpha=opacity,color='b')\n",
        "\n",
        "  plt.xlabel('Country')\n",
        "  plt.ylabel('Count')\n",
        "  plt.title('Corona Cases per Country')\n",
        "  #plt.xticks(index + bar_width, age_ranges)\n",
        "  plt.xticks(index, country_cnts.index.values)\n",
        "  plt.legend()\n",
        "\n",
        "  plt.tight_layout()\n",
        "  return n_groups, counts\n",
        "ngrps, cnts = create_bar_plot_by_country(covid19_data)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.legend:No handles with labels found to put in legend.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N5BhvrWu3OGX"
      },
      "source": [
        "This is difficult to interpret due to the squashed x-axis.\n",
        "\n",
        "**Problem 5)** Print the same bar plot by country, but limit the plot to countries that have >1000 cases."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mBdkfYAIdY6t"
      },
      "source": [
        "# distribution of cases by country with >1000 cases\n",
        "# Problem 5) Complete where we have indicated below\n",
        "def create_bar_plot_by_country(covid19_data):\n",
        "  country_cnts = covid19_data.country.value_counts()\n",
        "\n",
        "  # get the counts for countries with >1000 cases, this should be a data series\n",
        "  counts =  country_cnts[country_cnts>1000]\n",
        "  # get number of countries with >1000 cases, this should be an integer\n",
        "  n_groups = len(counts)\n",
        "\n",
        "  # create plot\n",
        "  fig, ax = plt.subplots(figsize=(20, 10))\n",
        "  index = np.arange(n_groups)\n",
        "  bar_width = 0.35\n",
        "  opacity = 0.8\n",
        "\n",
        "  rects1 = plt.bar(index, counts, bar_width,\n",
        "                  alpha=opacity,color='b')\n",
        "\n",
        "  plt.xlabel('Country')\n",
        "  plt.ylabel('Count')\n",
        "  plt.title('Corona Cases per Country')\n",
        "  plt.xticks(index, country_cnts.index.values) # Problem 5, fill this in\n",
        "  plt.legend()\n",
        "\n",
        "  plt.tight_layout()\n",
        "  return n_groups, counts\n"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_k17AqYnUow9"
      },
      "source": [
        "Now let's run our visualization."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lvX7rQSKUqV_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 690
        },
        "outputId": "c6c512bc-4114-497c-f551-a65f733a0c26"
      },
      "source": [
        "ngrps, cnts = create_bar_plot_by_country(covid19_data)"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.legend:No handles with labels found to put in legend.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qWIpbmEI4ZqR"
      },
      "source": [
        "Perhaps a more interesting visualization is to view the COVID-19 cases on the world map. To do this, we will make use of another very useful data frame function is ```groupby()```. The ```groupby()``` method groups our data rows by a specific columns or column values. Here we group our data by their rounded latitude, longitude, and country. We then count the IDs which gives us the number of cases in a latitude-longitude region."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pcJKmOpt17NY"
      },
      "source": [
        "map_intensities = covid19_data.groupby([covid19_data.latitude.round(1), \n",
        "                                        covid19_data.longitude.round(1), \n",
        "                                        covid19_data.country]).ID.count().reset_index()"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VuW1HSEhgFJJ"
      },
      "source": [
        "Now let's plot the cases across the globe using cartopy. Try to play around with the various parameters to get an idea of what they all do!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fJZJ81otxQ7Z",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        },
        "outputId": "af1844b9-6902-40e6-a56d-22e601affed9"
      },
      "source": [
        "# set the colors for countries\n",
        "map_intensities['labels_enc'] = pd.factorize(map_intensities['country'])[0] \n",
        "\n",
        "fig = plt.figure(figsize=(10,8))\n",
        "\n",
        "ax = fig.add_subplot(1,1,1, projection=ccrs.Robinson())\n",
        "\n",
        "ax.set_global()\n",
        "\n",
        "ax.add_feature(cfeature.COASTLINE, edgecolor=\"tomato\")\n",
        "ax.add_feature(cfeature.BORDERS, edgecolor=\"tomato\")\n",
        "ax.gridlines()\n",
        "\n",
        "plt.scatter(x=map_intensities['longitude'], y= map_intensities['latitude'],\n",
        "            s=map_intensities['ID']/10,\n",
        "            c=map_intensities['labels_enc'],\n",
        "            cmap=\"Set1\",\n",
        "            alpha=0.4,\n",
        "            transform=ccrs.PlateCarree()) \n"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f5fd2fbdbd0>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/cartopy/crs.py:228: ShapelyDeprecationWarning: __len__ for multi-part geometries is deprecated and will be removed in Shapely 2.0. Check the length of the `geoms` property instead to get the  number of parts of a multi-part geometry.\n",
            "  if len(multi_line_string) > 1:\n",
            "/usr/local/lib/python3.7/dist-packages/cartopy/crs.py:280: ShapelyDeprecationWarning: Iteration over multi-part geometries is deprecated and will be removed in Shapely 2.0. Use the `geoms` property to access the constituent parts of a multi-part geometry.\n",
            "  for line in multi_line_string:\n",
            "/usr/local/lib/python3.7/dist-packages/cartopy/crs.py:347: ShapelyDeprecationWarning: __len__ for multi-part geometries is deprecated and will be removed in Shapely 2.0. Check the length of the `geoms` property instead to get the  number of parts of a multi-part geometry.\n",
            "  if len(p_mline) > 0:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y6OpAAe4Fx3y"
      },
      "source": [
        "We see hotspots in the northeast USA (centered around NYC), the Iberian Peninsula, the U.K., China, Iran, and South Korea. Given recent news articles, we also notice that there is some underreporting in our data. We do not have the statistical language to formulate our questions as formal statisical hypotheses, but we can produce plots that support a particular interpretation of each hypothesis. We consider our first hypothesis:\n",
        "\n",
        "**Are mortality rates correlated with age?**\n",
        "\n",
        "First we need to clean and subset our data. We count the outcomes."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CYMp1m8-V6Mg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "48086ca1-f195-4a5b-819a-0570b2cedfa3"
      },
      "source": [
        "print(covid19_data['outcome'].value_counts())"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "discharge                                                                   161\n",
            "stable                                                                      156\n",
            "Under treatment                                                             133\n",
            "died                                                                        117\n",
            "discharged                                                                   95\n",
            "recovered                                                                    59\n",
            "death                                                                        47\n",
            "stable condition                                                             21\n",
            "Alive                                                                        14\n",
            "Dead                                                                         13\n",
            "Stable                                                                        6\n",
            "released from quarantine                                                      4\n",
            "Recovered                                                                     4\n",
            "Discharged from hospital                                                      4\n",
            "critical condition, intubated as of 14.02.2020                                2\n",
            "Symptoms only improved with cough. Currently hospitalized for follow-up.      2\n",
            "not hospitalized                                                              2\n",
            "recovering at home 03.03.2020                                                 2\n",
            "Discharged                                                                    2\n",
            "dead                                                                          2\n",
            "severe                                                                        2\n",
            "treated in an intensive care unit (14.02.2020)                                2\n",
            "Critical condition                                                            1\n",
            "Receiving Treatment                                                           1\n",
            "Deceased                                                                      1\n",
            "severe illness                                                                1\n",
            "unstable                                                                      1\n",
            "Died                                                                          1\n",
            "Death                                                                         1\n",
            "Name: outcome, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3aKyH4WpIq8i"
      },
      "source": [
        "From these results, we can see that there really is not enough data to draw definitive statistically robust conclusions. We can still do our analysis in anticipation that the data will be updated as the disease progresses. Let's group our outcomes into positive and negative classes."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7c-6vaDdV6jo"
      },
      "source": [
        "pos=['discharge','stable','discharged','recovered','stable condition','Alive','Stable','released from quarantine','Recovered','Discharged from hospital','Discharged']\n",
        "neg=['died','death','Dead','severe','critical condition, intubated as of 14.02.2020','dead','Death','Deceased','severe illness','unstable','Died','Critical condition']\n",
        "\n",
        "def setOutcomeClass(outcome):\n",
        "  if outcome in pos:\n",
        "    return 1\n",
        "  elif outcome in neg:\n",
        "    return 0\n",
        "  else:\n",
        "    return np.nan\n",
        "\n",
        "covid19_data['outcome_class'] = covid19_data.apply(lambda row : setOutcomeClass(row['outcome']), axis = 1) "
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3Zjrz4ha53N5"
      },
      "source": [
        "Now let's create a different type of plot, a line graph. Here we want to visualize patterns of case severity across age groups, but each age group can have a different number of samples. Therefore, we compute an empirical probability of a positive outcome but also include $\\pm$ 1 standard deviation. We also include Spearman's correlation on the plot."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rM_5hZhWN-vS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 628
        },
        "outputId": "72bd866c-a8c8-454a-b74a-c817be23afcb"
      },
      "source": [
        "# subset the data by age range and outcome class, then group by age range,\n",
        "# and use the agg (aggregate) function to compute the mean, count, and \n",
        "# standard deviation by age group\n",
        "outcomes_per_age = covid19_data[['age_range','outcome_class']].groupby(['age_range']).agg(['mean','count','std']).reset_index()\n",
        "x = outcomes_per_age.age_range\n",
        "y = outcomes_per_age.outcome_class['mean']\n",
        "error = outcomes_per_age.outcome_class['std']\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(20, 10))\n",
        "ax.errorbar(x, y, yerr=error, fmt='-o')\n",
        "plt.ylabel('Relative Frequency', fontsize=14)\n",
        "plt.xlabel('Age Group', fontsize=14)\n",
        "\n",
        "fig.text(0.2,0.2,\"spearman correlation = \" + str(covid19_data['age_range'].corr(covid19_data['outcome'],method='spearman')), fontsize=14)\n"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.2, 0.2, 'spearman correlation = -0.3243078536594327')"
            ]
          },
          "metadata": {},
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ],
            "image/png": "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cX322WeKiIhQgQIFVK5cOb3xxhuZnl9Jio2NlZeXl2rWrOnUPmvWLNWrV09BQUEKCAhQRESEJk+e7NTntddeU/369VWoUCEFBwerTZs2Wrdu3RXrNcaod+/eWdYEAAAA5BZe7i4AyCvOnTsnb29vd5dxTSUnJ8vHx8epLSUlRZ6enjLG5EgNnp6eKlmyZI68lqulpqaqdevWKlasmH7++WcdPnxYXbt2lbVWY8aMyfJ59erVU5cuXRQWFqYjR47o5ZdfVrNmzbRz5055e3tr48aNSk1N1fjx41WlShUlJCToscce0+HDhzVx4sQM++vWrZsiIiK0d+9ep3YfHx917dpVkZGRCgoK0urVq9WjRw+lpKTo9ddflyTt2LFDd9xxhx555BF98sknio2NVa9evRQcHKx77rlHkvT7778rNTXVsd99+/YpKipK999/v6Nt5MiRGjdunCZPnqxatWppzZo16tq1q3x9ffWf//zH0a9Zs2aaOnWqU41Xc24kae7cuerWrZuGDRumjz/+WGlpafrjjz8ynJf3339fd955p+Nx4cKFHfe//vprderUSe+8845atmyphIQE9ejRQ/7+/hkC0b/++ktdunRR06ZNlZiY6LStWLFievHFF1W9enV5e3trwYIF6t69u4KDg3XHHXdIOj8LsFevXqpfv76stXrppZfUrFkzbdiwQUWLFnWc04vFxcWpTZs2TucYAAAAyLWstfn6FhUVZZG3/Pjjj7Zhw4Y2ICDAFipUyNavX9+uXbvWWmvtpEmTbEBAgJ03b56tUqWK9fX1tbfccovdtm2b0z7mzZtn69ata319fW358uXt888/b8+ePevYPnXqVFuvXj0bGBhog4OD7b333mv37Nnj2L506VIryX711Ve2fv361tvb286fP982adLEPv744/bpp5+2RYoUscWLF7ejRo2yZ86csb169bKFCxe2YWFhdsqUKU71DBw40FatWtX6+fnZcuXK2QEDBtjTp087tg8ZMsSGh4fb6dOn24oVK9rAwEDbtm1be+jQocueq8TERNupUydbtGhR6+/vb+vUqWO///57x/YJEybYSpUqWW9vb1upUiU7ceJEp+dLsmPHjrXt27e3BQoUsM8884yjlkmTJtmKFStaDw8P+/fff9ujR4/aHj162ODgYBsYGGgbN25sf//99wzn7ELNSUlJtmPH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+ENDhw7VqlWrdOTIEcesqF27dqlMmTKO59WrVy9DjbVr13bcN8YoJCREtWrVcrR5e3urSJEiTjM0Zs+erVGjRmnr1q06ceKEUlNTnda8uXAcF68hU7p06cvO8oiPj1ft2rVVvHjxTLcnJCTokUcecWqLiYnRvHnznNoyO8YyZcqoRIkSjscrV67UqVOnFBwc7NTvzJkz2rZtW6avn5qaqhEjRmjmzJlKTEzU2bNnlZycrFtuuSXLY8rqOBo1auQ0UycmJkbJycnaunWrYzwuHhfpyufPy8tLlStXvqpaLtaqVSv9/PPPks6P3fr16//xviTpwQcf1O233659+/bpzTff1H333adly5apQIECTv0OHDigli1b6vbbb9dTTz3laH/yyScVExPjWFfpcmbOnKm///5bq1ev1oABAzRy5MgMM8Wy6/3331f9+vVVp06dDK8xZcoUffrppwoPD9eqVavUr18/VahQQd27d5ckdezY0dG/Vq1aioqKUrly5fTVV1/p7rvvzta5uTA76YUXXtC9994rSZo4caK+++47TZkyRQMHDpQkp3WiIiIilJqaqmHDhjlmKPXo0UPbtm0lDn1nAAAc3klEQVRT27Ztde7cORUqVEj9+vXTyy+/LA8PD509e1YdOnTQm2++qQoVKlz2nBQsWFCrVq3SiRMntGTJEj399NMqX768mjZtmqHv008/rdjYWMXGxjrN4Lz0HLdt2zbD9QcAAADkVoRNyHUmTZqk/v37a9GiRZo3b55eeOEFzZ07Vy1atHD0udxi1WlpaRoyZIjuu+++DNuCg4N18uRJtWjRwrEwcUhIiJKSknTzzTdn+FaugICADPu4dJFwY0ymbRf+CP7111/VsWNHDRkyRG+//baCgoI0b948Pfvss1fc78Uf83GVS89dZsd4aVtaWppKlCjhCFcuVqhQoUxf580339Rbb72l0aNHq1atWgoMDNTzzz9/2QDoal18LFd7/nbt2qUaNWpcdv+dO3fO8I1lF3zwwQeOb4O78NolS5bUsmXLnPolJSUpNTX1ioueFy5cWIULF1aVKlXUqFEjFSlSRJ9//rkeeughR5/9+/frtttuU82aNTV16lSn41+yZIl2797t+OazCwFqyZIlNXDgQKePbV74mF+NGjWUmpqqRx99VAMGDJCXl5dKliypAwcOONV24MABeXl5ZQg2Dx48qC+//FLjxo3LcDwDBgzQs88+6wiUatWqpT///FOvvfaaI2y6VOnSpVWmTBlt2bIl2+emVKlSjmO5wMvLS1WqVNGuXbsyfR1JatiwoY4fP64DBw6oRIkSMsZo5MiRGj58uPbv36/g4GDHRz4rVqyoffv2KSEhQd26dVO3bt0knb8urLXy8vLSwoULHR8/9PDwcASZERERSkhI0PDhwzOETU899ZRmzJihpUuXqmLFipnWuWrVKsXFxWn48OFZHgsAAACQ2xA2IVeqU6eO6tSpo4EDB6pVq1aaPHmyI2xKS0vTihUrdOONN0o6Hxrs3btXN9xwgySpbt262rhxY5azVlavXq2kpCQNHz7cMUPhiy++uGbHsmzZMoWGhjrNrLh4DZh/KjIyUlOnTlVSUlKms5tuuOEGLVu2zOkP+9jY2CsGLJmpW7euDhw4IA8Pjyz/KL5UbGys2rRp4whLrLXavHmzgoKCHH18fHwyzPDK7Dg+++wzpaWlOWY3xcbGysfHR5UqVbrqY7mgdOnSWrVq1WX7ZBWkSVJoaGiGtujoaL366qvas2ePY4bct99+K19fX0VFRWW7tgtTT8+ePeto27dvn2699VaFh4dr+vTp8vJyfvv+5ptvnMLS33//XY888oh++OEHValSJcvXSktLU0pKilJTU+Xl5aXo6GjNmTPHqc+3336revXqZQj0Pv74Y/n6+ma63tmpU6cyzNTx9PS8bACYlJSkxMRER4CUmUvPTVRUlHx9fbVp0ybFxMQ4jmnbtm1OAfWlVq1aJT8/P6efxws1Xhjb6dOnKzo6WsHBwQoKCtLatWud+r777rv69ttvNWfOnMuur5WWluY0ltL59aNmzpyppUuXqnr16lk+d+LEiapQoYKaNWuWZR8AAAAgtyFsQq6yY8cOvffee7rrrrsUGhqq7du3a82aNXriiSccfby8vNS/f3+NHj1a/v7+euqppxQeHu74Y+yll17SnXfeqXLlyun++++Xl5eX1q1bpxUrVuj1119X2bJl5evrq7Fjx6p3795KSEhwCoJcrWrVqkpMTNS0adMUHR2txYsXa/r06f96v506ddKIESPUtm1bjRgxQqGhoVq3bp0KFiyoW2+9VQMGDNB9992nqKgoNW/eXIsWLdK0adP+UbDWrFkz3XTTTWrbtq1ef/11Va9eXfv379eiRYvUrFkz3XzzzZke98yZMxUbG6vixYtrzJgx2rFjhyIjIx19ypcvrxUrVmjnzp0KDAx0fO37xXr16qVRo0apV69e6tevn7Zv365BgwapT58+GT5idjX+7cfoMtO8eXOFh4erS5cueuutt3T48GENGDBAPXr0cARXK1asUJcuXTRlyhQ1aNBAW7du1eeff65mzZopODhYe/bs0YgRI+Tr66s777xTkrR3717dcsstKl26tEaNGqWkpCTHawYHB8vT01NVq1Z1quVCn+rVqzvCyKlTp8rPz0+1atWSj4+P4uLiNHjwYN17773y9fWVJD3++OMaO3as+vfvr549e2rZsmX6+OOPM/zMWmv1wQcfqGPHjgoMDMxwLtq0aaMRI0aoQoUKCg8PV3x8vP73v/+pS5cuks4vev3yyy/rnnvuUalSpbRz504NHjxYISEhat++vSRl69wUKlRIjz/+uIYMGaIyZcqofPnyGjt2rP766y9H0Dl//nzt379f0dHR8vf319KlS/XSSy/psccecxx3UlKSZs2apVtuuUVnz57VpEmTNGvWLP3444+Szs9eq1mzptMxhoSEyNfX16l92LBhatiwoSpWrKizZ89q4cKFmjp1qsaMGePo07t3b02dOlVz585VkSJFtH//fklyLEx/walTpzRt2jQ999xzl53NCQAAAOQ6WS3mlF9uLBCet+zfv9+2b9/eli5d2vr4+NiwsDA7YMAAm5ycbK09vzB0QECAnTt3rq1cubL18fGxjRs3zrCY8uLFi21MTIz19/e3BQsWtFFRUXbMmDGO7TNmzLAVK1a0vr6+tn79+nbRokVWkl26dKm1NuvFlTNb0Do8PNwOGTLEqa1EiRJOrzdo0CBbvHhxGxAQYNu3b2/fffdde/7yOy+zhYYvHOvl7N69295///22cOHC1t/f30ZERDiOwdr/X4jcy8vLVqpUKcPXwyuTr4PPatHj48eP2yeffNKGhoZab29vW6ZMGduhQwe7detWa23Gc3bkyBHbvn17GxgYaIODg+2AAQPsE088YZs0aeLY56ZNm2yjRo2sv7+/lWR37NiRYYFwa88vUN2gQQPr4+NjQ0JCbP/+/Z0Wkc5sXLp27Wpbt2592fN3Lfz555+2devW1t/f3xYtWtT27dvXqdYL5+nCOO3atcu2bNnSBgcHO85rp06dbEJCguM5FxbGz+y2Y8eO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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "okMmnlTT7XPw"
      },
      "source": [
        "The visualization shows that the older the individual, the more likely the negative outcome. Spearman's negative correlation confirms this. \n",
        "\n",
        "**Problem 6)** Professor Derek is worried about outcomes over time for his age bracket (30-40). He wants you to plot the relative frequency of positive outcomes (y-axis) over time (x-axis) while also including 1 standard deviation above and below each point. You should not compute Spearman's correlation here. Fill in the function below.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1mbj0t9u67VE"
      },
      "source": [
        "# Problem 6) Complete where we have indicated below\n",
        "def create_bar_plot_for_derek(covid19_data):\n",
        "  # first we subset the data by the appropriate age bracket and do a bit of cleaning\n",
        "  prof_age_data = covid19_data[covid19_data.age_range==\"30-40\"]\n",
        "  prof_age_data=prof_age_data.replace(to_replace='25.02.2020 - 26.02.2020',value='25.02.2020')\n",
        "\n",
        "  # and we convert the column to a date-time\n",
        "  prof_age_data['date_confirmation']=pd.to_datetime(prof_age_data['date_confirmation'],dayfirst=True)\n",
        "\n",
        "  outcomes_over_time = prof_age_data[['date_confirmation','outcome_class']].groupby(['date_confirmation']).agg(['mean','count', 'std']).reset_index()\n",
        "  outcomes_over_time = outcomes_over_time.dropna() # we should drop the rows with missing values\n",
        "\n",
        "  x =  outcomes_over_time.date_confirmation \n",
        "  y =  outcomes_over_time.outcome_class['mean'] \n",
        "  error = outcomes_over_time.outcome_class['std']\n",
        "\n",
        "  fig, ax = plt.subplots(figsize=(20, 10))\n",
        "  ax.errorbar(x, y, yerr=error, fmt='-o')\n",
        "  plt.ylabel('Relative Frequency', fontsize=14)\n",
        "  plt.xlabel('Date', fontsize=14)\n",
        "  return x, y, error\n"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "771eA4ecUc4M"
      },
      "source": [
        "Now let's run our visualization."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mZI7k_tGUcU0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 610
        },
        "outputId": "a0c4b953-2b23-4677-a81a-b97ca7ce3d84"
      },
      "source": [
        "x,y,error = create_bar_plot_for_derek(covid19_data)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u1aCgyE0u-Mb"
      },
      "source": [
        "Let's move on to our last hypothesis.\n",
        "\n",
        "**Are reported cases of COVID-19 more prevalant in colder climates?**\n",
        "\n",
        "Here we use the absolute value of the latitude as a proxy for temperature."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4ABTEAt24BIs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fa91fdee-7b7b-4a29-aacb-361a2de13abb"
      },
      "source": [
        "# latitude data ranges from -90 (south pole) to 90 (north pole)\n",
        "print(covid19_data['latitude'].describe())"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "count    260425.000000\n",
            "mean         37.602863\n",
            "std          14.707939\n",
            "min         -54.000000\n",
            "25%          33.352046\n",
            "50%          40.661000\n",
            "75%          43.014087\n",
            "max          70.071800\n",
            "Name: latitude, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IxKQejkxQCg0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 628
        },
        "outputId": "e7ea7ea0-eef2-4e4c-bd18-28fbb946f952"
      },
      "source": [
        "fig, ax = plt.subplots(figsize=(20, 10))\n",
        "\n",
        "num_bins = 90\n",
        "\n",
        "# the histogram of the data\n",
        "ax.hist(abs(covid19_data['latitude']), num_bins, density=1,alpha=0.3)\n",
        "plt.ylabel('Density', fontsize=14)\n",
        "plt.xlabel('Absolute Latitude Degree', fontsize=14)\n"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'Absolute Latitude Degree')"
            ]
          },
          "metadata": {},
          "execution_count": 31
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CqIfte7KCrW6"
      },
      "source": [
        "This is an interesting plot, but what if most people in the world live between latitudes 20 and 60? We would expect there to be more infections here. Let's also plot the density of individuals across the global at each latitude."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OxoTi0-ZcAOV",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 628
        },
        "outputId": "85e78ee3-3e46-4333-acec-59ec7dd674d0"
      },
      "source": [
        "# I downloaded and prepared the data for you.\n",
        "population_data_url = requests.get('https://drive.google.com/uc?export=download&id=19BjvYrh_MkzE2NMJBOSJzJUaXaw3S85X')\n",
        "population_csv = StringIO(population_data_url.text)\n",
        "population_data = pd.read_csv(population_csv, delimiter=\" \", header=None)\n",
        "abs_latitude=np.linspace(0,90,360)\n",
        "\n",
        "# population data goes from 90 degrees to -90 degrees in increments of 0.25 degrees\n",
        "lat_sums=np.sum(population_data,axis=1)\n",
        "lat_by_degree = lat_sums.groupby(np.arange(len(lat_sums))//4).sum()\n",
        "population_sums = lat_by_degree.groupby(np.concatenate((np.arange(0,len(lat_by_degree)/2),np.arange(0,len(lat_by_degree)/2)[::-1]))).sum()\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(20, 10))\n",
        "\n",
        "num_bins = 90\n",
        "\n",
        "# the histogram of the data\n",
        "ax.hist(abs(covid19_data['latitude']), num_bins, density=1,alpha=0.3)\n",
        "ax.hist(range(num_bins)[::-1],bins=num_bins, density=1, weights=population_sums,alpha=0.3)\n",
        "plt.ylabel('Density', fontsize=14)\n",
        "plt.xlabel('Absolute Latitude Degree', fontsize=14)"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'Absolute Latitude Degree')"
            ]
          },
          "metadata": {},
          "execution_count": 32
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PeVmT0dBDFb2"
      },
      "source": [
        "We see that there are a considerable number of people who live close to the equator (latitude=0) so infections indeed are more prevalant in colder regions. Note that there are other factors in play here, such as, where the disease began and travel patterns."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4DiSe3Y7T_zb"
      },
      "source": [],
      "execution_count": 32,
      "outputs": []
    }
  ]
}
